name: "使用新版clang编译内核"

on:
  workflow_dispatch:
    inputs:
      AUTHOR:
        description: 'GitHub用户名'
        required: true
        default: 'PPKunOfficial'   
      CHECKOUT_REPO:
        description: '需要拉取的仓库'
        required: true
        default: 'android_kernel_xiaomi_sdm845'
      CHECKOUT_BRANCH:
        description: '需要拉取的分支'
        required: true
        default: 'rebase-s'
      USEDEFCONFIG:
        description: '使用的defconfig'
        required: true
        default: 'dipper_defconfig'
      USE_LANZOU:
        description: '是否上传到蓝奏云'
        required: true
        default: '0'
      LANZOU_COOKIE_YLOGIN:
        description: 'LANZOU_COOKIE_YLOGIN'
        required: false
        default: ''
      LANZOU_COOKIE_PHPDISK:
        description: 'LANZOU_COOKIE_PHPDISKINFO'
        required: false
        default: ''

env:
  CLANG_VER: 'proton-clang'
  ARCHOSUB: 'arm64'
  KERNEL_DIR: 'kernel_source'
  COMPILE_THREAD: '32' # $(nproc --all) cpu核心数

jobs:
  newclang:
    name: 使用新版clang编译内核
    runs-on: ubuntu-latest
    steps:
    - name: cacheClang
      id: cacheClang
      uses: actions/cache@v2
      with:
        path: |
          ${{ github.workspace }}/${{ env.CLANG_VER }}
        key: ${{ runner.os }}/${{ env.CLANG_VER }}

    - name: 获取时间
      id: get_time
      run: |
        echo "actions_time=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

    - name: 签出仓库
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.AUTHOR }}/${{ github.event.inputs.CHECKOUT_REPO }}
        ref: ${{ github.event.inputs.CHECKOUT_BRANCH }}
        path: ${{ env.KERNEL_DIR }}

    - name: 拉取模板
      uses: actions/checkout@v3
      with:
        path: Anykernel

    - name: 准备编译环境
      run: |
        sudo apt update -y
        sudo apt install -y git wget unzip p7zip-full git 
        sudo apt install bc \
            binutils-dev \
            bison \
            build-essential \
            ca-certificates \
            ccache \
            clang \
            cmake \
            curl \
            file \
            flex \
            git \
            libelf-dev \
            libssl-dev \
            lld \
            make \
            ninja-build \
            python3-dev \
            texinfo \
            u-boot-tools \
            xz-utils \
            zlib1g-dev
        
    - name: 编译中
      run: |
        cd ${{ github.workspace }}/${{ env.KERNEL_DIR}}
        export ARCH=${{ env.ARCHOSUB}}
        export AR=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-ar
        export NM=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-nm
        export OBJCOPY=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-objcopy
        export OBJDUMP=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-objdump
        export STRIP=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-strip
        export SUBARCH=${{ env.ARCHOSUB}}
        export CC=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/clang
        export CROSS_COMPILE=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/arm-linux-gnueabi-
        export PATH="${{ github.workspace }}/${{ env.CLANG_VER }}/bin:$PATH"

        make O=out ${{ github.event.inputs.USEDEFCONFIG }}

        make -j${{ env.COMPILE_THREAD }} O=out \
        AR=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-ar \
        NM=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-nm \
        OBJCOPY=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-objcopy \
        OBJDUMP=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-objdump \
        STRIP=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-strip \
        ARCH=${{ env.ARCHOSUB}} \
        SUBARCH=${{ env.ARCHOSUB}} \
        CC=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/clang \
        CROSS_COMPILE=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/arm-linux-gnueabi- \
        ${{ github.event.inputs.COMPILE_SET }}

    - name: 打包内核
      run: |
        cd ${{ github.workspace }}/Anykernel
        cp ${{ github.workspace }}/${{ env.KERNEL_DIR}}/out/arch/arm64/boot/Image.gz-dtb ${{ github.workspace }}/Anykernel/
        zip -u Kernel_template.zip Image.gz-dtb
        cd ${{ github.workspace }}
        mkdir kernel_public
        cp ${{ github.workspace }}/Anykernel/Kernel_template.zip ${{ github.workspace }}/kernel_public/${{ env.actions_time }}.zip
    
    - name: 发布到Release
      if: github.event.inputs.USE_LANZOU == '0'
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: false
        title: Release ${{ github.event.inputs.AUTHOR }}/${{ github.event.inputs.CHECKOUT_REPO }}-${{ env.actions_time }}
        files: |
          ${{ github.workspace }}/kernel_public/${{ env.actions_time }}.zip
    
    - name: 发布到蓝奏云
      if: github.event.inputs.USE_LANZOU == '1'
      run: |
        sudo apt install python3 python3-pip
        pip3 install lanzou-api
        cd ${{ github.workspace }}/Anykernel
        python3 lz_upload.py ${{ github.event.inputs.LANZOU_COOKIE_YLOGIN }} ${{ github.event.inputs.LANZOU_COOKIE_PHPDISK }} ${{ github.workspace }}/kernel_public/${{ env.actions_time }}.zip

