name: "Compile Android Kernel"

on:
  workflow_dispatch:
    inputs:
      KERNEL_URL:
        description: 'KERNEL_URL'
        required: true
        default: 'https://github.com/PPKunOfficial/android_kernel_xiaomi_sdm845.git'
      KERNEL_DIR:
        description: 'KERNEL_DIR'
        required: true
        default: 'android_kernel_xiaomi_sdm845'
      CLONE_ARG:
        description: 'CLONE_ARGUMENT'
        required: false
        default: '-b lineage-18.1'
      ARCHOSUB:
        description: 'ARCH/SUBARCH'
        required: true
        default: 'arm64'
      TOOLCHAIN_DIR:
        description: 'TOOLCHAIN_DIR'
        required: true
        default: 'proton-clang-20210522'
      USEDEFCONFIG:
        description: 'USEDEFCONFIG'
        required: true
        default: 'dipper_defconfig'
      COMPILE_SET:
        description: 'COMPILE_SET'
        required: false
        default: ''

env:
  CLANG_VER: '20210522-proton'

jobs:
  ready_compile_env:
    name: Compile kernel
    runs-on: ubuntu-latest
    steps:
    - name: cacheClang
      id: cacheClang
      uses: actions/cache@v2
      with:
        path: 
          ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}
          ${{ github.workspace }}/ccache-dir
        key: ${{ runner.os }}-${{ github.event.inputs.TOOLCHAIN_DIR }}/${{ env.CLANG_VER }}

    - name: Ready Compile
      run: |
        sudo apt update && sudo apt upgrade -y
        sudo apt install -y git wget unzip p7zip-full git ccache

    - name: Clone Clang
      if: steps.cacheClang.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/kdrag0n/proton-clang/archive/refs/tags/20210522.zip -q
        unzip ./20210522.zip

    - name: Clone Kernel Code
      run: |
        chmod -R 777 ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}
        git clone ${{ github.event.inputs.KERNEL_URL }} ${{ github.event.inputs.CLONE_ARG }}

    - name: Compile Kernel
      run: |
        cd ${{ github.workspace }}/${{ github.event.inputs.KERNEL_DIR }}

        export USE_CCACHE=1
        export CCACHE_DIR=${{ github.workspace }}/ccache-dir
        export ARCH=${{ github.event.inputs.ARCHOSUB }}
        export AR=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-ar
        export NM=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-nm
        export OBJCOPY=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-objcopy
        export OBJDUMP=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-objdump
        export STRIP=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-strip
        export SUBARCH=${{ github.event.inputs.ARCHOSUB }}
        export CC=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/clang
        export CROSS_COMPILE=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/arm-linux-gnueabi-
        export PATH="/usr/lib/ccache:$PATH"
        
        ccache -M 5G

        make O=out ${{ github.event.inputs.USEDEFCONFIG }} \
        ${{ github.event.inputs.COMPILE_SET }} \
        make -j32 O=out \
        AR=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-ar \
        NM=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-nm \
        OBJCOPY=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-objcopy \
        OBJDUMP=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-objdump \
        STRIP=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/llvm-strip \
        ARCH=${{ github.event.inputs.ARCHOSUB }} \
        SUBARCH=${{ github.event.inputs.ARCHOSUB }} \
        CC=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/clang \
        CROSS_COMPILE=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=ccache ${{ github.workspace }}/${{ github.event.inputs.TOOLCHAIN_DIR }}/bin/arm-linux-gnueabi-
    
    - name: Upload to Cloud
      run: |
        sudo apt install curl
        curl -sL https://git.io/file-transfer | sh 
       
        ./transfer arp ${{ github.workspace }}/${{ github.event.inputs.KERNEL_DIR }}/out/arch/arm64/boot/Image.gz-dtb --silent
