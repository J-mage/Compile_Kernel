name: "Compile Android Kernel"

on:
  workflow_dispatch:
    inputs:
      CHECKOUT_REPO:
        description: 'CHECKOUT_REPO'
        required: true
        default: 'PPKunOfficial/android_kernel_xiaomi_sdm845'
      CHECKOUT_BRANCH:
        description: 'CHECKOUT_BRANCH'
        required: true
        default: 'rebase-s'
      USEDEFCONFIG:
        description: 'USEDEFCONFIG'
        required: true
        default: 'dipper_defconfig'

env:
  CLANG_VER: 'proton-clang-20210522'
  ARCHOSUB: 'arm64'
  KERNEL_DIR: 'kernel_source'
jobs:
  compile:
    name: 编译内核
    runs-on: ubuntu-latest
    steps:
    - name: 签出仓库
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.inputs.CHECKOUT_REPO }}
        ref: ${{ github.event.inputs.CHECKOUT_BRANCH }}
        path: ${{ env.KERNEL_DIR }}

    - name: 获得缓存
      id: cacheClang
      uses: actions/cache@v2
      with:
        path: |
          ${{ github.workspace }}/${{ env.CLANG_VER }}
        key: ${{ runner.os }}-${{ env.CLANG_VER }}

    - name: 准备编译环境
      run: |
        sudo apt update -y
        sudo apt install -y git wget unzip p7zip-full git

    - name: 拉取编译器
      if: steps.cacheClang.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/kdrag0n/proton-clang/archive/refs/tags/20210522.zip -q
        unzip ./20210522.zip
        chmod -R 777 ${{ github.workspace }}/${{ env.CLANG_VER }}

    - name: 编译中
      run: |
        cd ${{ github.workspace }}/${{ env.KERNEL_DIR}}
        git pull 
        export ARCH=${{ env.ARCHOSUB}}
        export AR=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-ar
        export NM=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-nm
        export OBJCOPY=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-objcopy
        export OBJDUMP=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-objdump
        export STRIP=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-strip
        export SUBARCH=${{ env.ARCHOSUB}}
        export CC=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/clang
        export CROSS_COMPILE=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/arm-linux-gnueabi-
        export PATH="${{ github.workspace }}/${{ env.CLANG_VER }}/bin:$PATH"

        make O=out ${{ github.event.inputs.USEDEFCONFIG }}
        
        make -j$(nproc --all) O=out \
        AR=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-ar \
        NM=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-nm \
        OBJCOPY=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-objcopy \
        OBJDUMP=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-objdump \
        STRIP=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/llvm-strip \
        ARCH=${{ env.ARCHOSUB}} \
        SUBARCH=${{ env.ARCHOSUB}} \
        CC=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/clang \
        CROSS_COMPILE=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=${{ github.workspace }}/${{ env.CLANG_VER }}/bin/arm-linux-gnueabi- \
        ${{ github.event.inputs.COMPILE_SET }}
    
    - name: 上传到网盘
      run: |
        sudo apt install curl
        curl -sL https://git.io/file-transfer | sh 
       
        ./transfer arp ${{ github.workspace }}/${{ env.KERNEL_DIR}}/out/arch/arm64/boot/Image.gz-dtb --silent
